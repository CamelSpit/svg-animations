import React, {Component} from 'react'
import lodash from 'lodash'

export default class SvgPath extends Component {
    constructor() {
        super();
        this.state = {
            // pathPoints: [[100,50], [95,45], [40,45], [10,70], [45,130], [70, 110], [45, 130], [30, 170], [38, 190], [70, 185], [100, 165], [115,140]
            pathPoints: [100,50, 95,45, 40,45, 10,70, 20,100, 45,130, 70, 110, 45, 130, 30, 170, 38, 190, 70, 185, 100, 165, 115,140],
            webPathOffset: 205,
            devPathOffset: 440
            // pathPointsBezier: [100,50, 105,46, 90,40, 95,45, 85,38, 20,52, 40,45]//, 10,70, 20,100, 45,130, 70, 110, 45, 130, 30, 170, 38, 190, 70, 185, 100, 165, 115,140],
        }
    }

    //In componentDidMount, create a callback for the requestAnimationFrame
    componentDidMount() {
        //must create in componentDidMount!
        const animateDev = (timestamp) => {
            if (this.state.devPathOffset <= 0){
                this.setState({
                    devPathOffset: 0
                })
                cancelAnimationFrame(this.rafIDDev)
            } else {
                const devPathOffset = this.state.devPathOffset - 2
                this.setState({
                    devPathOffset
                })
                //recursive call - this ensures that this keeps running!
                this.rafIDDev = requestAnimationFrame(animateDev);
            }
        };

        const animateWeb = (timestamp) => {
            if (this.state.webPathOffset <= 0){
                this.setState({
                    webPathOffset: 0
                })
                cancelAnimationFrame(this.rafIdWeb)
                //call to START the next animation
                this.rafIDDev = requestAnimationFrame(animateDev);
            } else {
                const webPathOffset = this.state.webPathOffset - 2
                this.setState({
                    webPathOffset
                })
                //recursive call - this ensures that this keeps running!
                this.rafIdWeb = requestAnimationFrame(animateWeb);
            }
        };
        //call to START the animation
        this.rafIdWeb = requestAnimationFrame(animateWeb);
        
    }

    //ensure the animation stops if the component dies
    componentWillUnmount() {
        cancelAnimationFrame(this.rafIdWeb);
        cancelAnimationFrame(this.rafIdDev);
    }

    createLinePath(array){
        array = lodash.chunk(array, 2)
        let pathStr = `M ${array[0]}`
        array.map((e, i) => {
            if(i > 0){
                pathStr += ` L ${e}`
            }
        })
        return pathStr
    }

    createBezierPath(array){
        let pathStr = `M ${array[0]} ${array[1]}`
        array = lodash.chunk(array.slice(2), 6)
        console.log(array)
        array.map((e, i) => {
            pathStr += ` C ${e.join(' ')}`
        })
        console.log(pathStr)
        return pathStr
    }

    render(){
        return (
            <div className="plainSVGDiv">
                <p style={{width: '80vw'}}>
                    This animation makes it appear to hand-write 'web developer' on the screen.
                    It does so by making a path, setting the dasharray and dashoffset so that nothing
                    is visible, and then changing the dashoffset until the word is "written".
                </p>
                


                <span>YOUR NAME HERE</span>
                <svg width="151.59413mm" height="42.682884mm" viewBox="0 0 151.59413 42.682884" id="svg1021" transform="rotate(0)">
                    <g id="layer1" transform="translate(-32.068694,-126.83846)">
                        <path
                            style={{fill:'none', stroke:'#000000', strokeWidth:'1.20000005', strokeLinecap:'round', strokeLinejoin:'miter', strokeMiterlimit:'4', strokeOpacity:'1'}}
                            d="m 34.521806,142.8386 c -0.599208,2.29704 -1.198488,4.59436 -1.534426,6.49267 -0.335938,1.89832 -0.408449,3.3972 -0.209165,4.87526 0.199284,1.47807 0.670275,2.93456 1.286966,3.58488 0.616692,0.65031 1.179761,0.53494 1.958896,-0.12507 0.779135,-0.66001 1.675884,-1.84522 2.434502,-3.0947 0.758617,-1.24948 1.293252,-2.38101 1.586493,-3.48233 0.293241,-1.10133 0.301843,-2.058 0.02826,-2.46781 -0.273585,-0.40982 -0.830068,-0.26127 -1.172248,0.34404 -0.342179,0.60531 -0.469734,1.66632 -0.472072,2.58161 -0.0023,0.91529 0.120619,1.68379 0.335777,2.64381 0.215158,0.96002 0.501874,2.03409 0.860517,2.75359 0.358643,0.71951 0.923559,1.15801 1.698655,0.98186 0.775096,-0.17615 1.832838,-0.91071 2.693734,-1.94397 0.860896,-1.03326 1.615541,-2.54624 2.099881,-3.88794 0.48434,-1.34171 0.743716,-2.60318 0.956307,-3.9237 0.212591,-1.32051 0.378549,-2.70095 0.427546,-3.55656 0.049,-0.85561 -0.01889,-1.18694 -0.462319,-1.0789 -0.443426,0.10804 -1.263558,0.65595 -1.505876,1.32708 -0.242319,0.67114 0.09287,1.46504 0.667487,2.3148 0.574619,0.84975 1.280696,1.63506 2.423106,1.98776 1.14241,0.3527 2.667033,0.21289 4.204239,-0.0331 1.537205,-0.24596 3.087637,-0.59817 4.297948,-1.26038 1.210311,-0.66221 2.081285,-1.63472 1.580586,-2.39474 -0.500698,-0.76002 -2.373896,-1.3084 -3.760399,-1.42132 -1.386504,-0.11291 -2.286766,0.2096 -2.856065,0.94943 -0.569299,0.73982 -0.849995,2.10498 -1.147605,3.30932 -0.29761,1.20433 -0.69266,2.55376 -0.736286,3.85728 -0.04363,1.30351 0.22102,2.5951 0.908905,3.59338 0.687885,0.99828 1.791738,1.66941 3.099667,1.98816 1.30793,0.31875 2.819911,0.28511 4.124188,-0.025 1.304276,-0.31015 2.509556,-0.95471 3.586095,-1.84829 1.076539,-0.89358 2.079297,-2.06578 2.973326,-4.11945 0.894029,-2.05366 1.672332,-4.96131 2.165416,-7.27129 0.493085,-2.30999 0.697316,-4.00878 0.906028,-6.19346 0.208712,-2.18468 0.421318,-4.84769 0.304998,-7.01552 -0.116321,-2.16782 -0.561901,-3.83702 -1.045935,-3.84152 -0.484034,-0.004 -1.006778,1.65598 -1.376667,3.38872 -0.369889,1.73274 -0.586824,3.53721 -0.750733,5.34853 -0.163909,1.81131 -0.274704,3.62861 -0.345202,5.55885 -0.0705,1.93025 -0.100663,3.97263 -0.196682,6.11518 -0.09602,2.14255 -0.257862,4.38451 -0.04379,6.18743 0.21407,1.80292 0.803993,3.16608 1.03743,2.4954 0.233437,-0.67067 0.1199,-3.16413 -0.09417,-4.9668 -0.214066,-1.80268 -0.509332,-2.76203 0.491507,-4.05123 1.000838,-1.28919 3.117842,-2.67693 5.007382,-2.71897 1.889541,-0.042 3.448005,1.33019 3.992181,3.07007 0.544176,1.73988 0.07888,3.82733 -0.679951,5.53726 -0.758834,1.70993 -1.739067,2.9439 -3.149265,3.47456 -1.410198,0.53066 -3.214591,0.31373 -4.269932,0.13303 -1.055342,-0.1807 -1.36103,-0.32514 -1.666907,-0.46966"
                            id="path940"
                            strokeDasharray="205"
                            strokeDashoffset={`${this.state.webPathOffset}`}/>
                        <path
                            style={{fill:'none', stroke:'#000000', strokeWidth:'1.20000005', strokeLinecap:'round', strokeLinejoin:'miter', strokeMiterlimit:'4', strokeOpacity:'1'}}
                            d="m 89.069628,145.18844 c -1.1759,0.5345 -2.352115,1.06914 -3.111073,2.18999 -0.758959,1.12085 -1.059089,2.6215 -1.121253,4.01317 -0.06216,1.39168 0.168997,2.77864 0.623095,3.70961 0.454098,0.93098 1.042964,1.4217 2.043878,1.47974 1.000914,0.058 2.421095,-0.37894 3.383294,-1.34124 0.962199,-0.9623 1.496962,-2.45964 1.86367,-3.90409 0.366709,-1.44445 0.595579,-3.04654 0.809408,-4.91757 0.213829,-1.87102 0.42773,-4.11697 0.534645,-6.09504 0.106916,-1.97806 0.106916,-3.68914 0.05345,-5.56023 -0.05346,-1.87109 -0.160409,-3.90305 -0.481167,-5.2395 -0.320757,-1.33646 -0.855465,-1.97811 -1.222677,-1.54963 -0.367211,0.42848 -0.595086,2.13753 -0.808965,3.79509 -0.213879,1.65755 -0.427698,3.3681 -0.641574,5.07911 -0.213876,1.711 -0.427697,3.42157 -0.478509,5.39983 -0.05081,1.97827 0.05076,4.00979 0.264621,5.61383 0.213858,1.60403 0.534606,2.67319 1.069311,3.84956 0.534706,1.17636 1.283086,2.4593 2.299083,3.20787 1.015996,0.74857 2.299058,0.96241 3.368243,0.16042 1.069184,-0.80199 1.924756,-2.62008 2.902509,-3.87889 0.97775,-1.25881 2.23027,-2.05587 3.13903,-2.91122 0.90876,-0.85536 1.5505,-1.81797 1.22049,-2.59932 -0.33002,-0.78135 -1.80866,-1.4638 -2.8929,-1.54139 -1.08424,-0.0776 -2.016498,0.50506 -2.658222,1.20019 -0.641724,0.69513 -1.069284,1.55025 -1.283222,2.45935 -0.213938,0.9091 -0.213938,1.8711 -4.1e-5,2.67326 0.213897,0.80215 0.641496,1.44355 1.069223,2.24553 0.427728,0.80198 0.855403,1.76425 1.869102,2.41688 1.01371,0.65263 2.40827,0.95147 3.63794,0.73752 1.22966,-0.21394 2.19215,-0.96255 2.90306,-2.02632 0.71091,-1.06377 1.10669,-2.2511 1.42742,-3.69443 0.32072,-1.44333 0.53463,-3.04766 0.89828,-3.97785 0.36365,-0.93019 0.70592,-1.10132 1.02645,-0.40691 0.32054,0.69441 0.53455,2.29953 0.74842,3.68969 0.21387,1.39017 0.4277,2.56623 0.74851,3.58217 0.32082,1.01595 0.74846,1.87123 1.15328,1.96485 0.40483,0.0936 0.87855,-0.7354 1.28633,-1.546 0.40777,-0.81061 0.87533,-1.86263 1.2858,-2.88451 0.41046,-1.02189 0.87265,-2.2929 1.24686,-3.30862 0.37421,-1.01571 0.69508,-1.87136 1.28297,-1.81793 0.58788,0.0534 1.44363,1.01616 2.19217,1.71123 0.74855,0.69507 1.39011,1.12277 2.24559,1.33661 0.85548,0.21384 1.92487,0.21384 3.04309,0.0387 1.11821,-0.17511 2.08969,-0.46656 2.73114,-0.89431 0.64145,-0.42775 0.85537,-0.96255 0.80191,-1.6038 -0.0535,-0.64125 -0.37444,-1.3902 -1.01582,-1.92473 -0.64139,-0.53452 -1.60391,-0.85536 -2.61446,-0.96285 -1.01055,-0.10749 -2.09026,4.7e-4 -2.89232,0.37468 -0.80206,0.37421 -1.33656,1.01561 -1.71094,1.87127 -0.37439,0.85566 -0.58815,1.92447 -0.58817,3.20787 -1e-5,1.2834 0.21378,2.77997 0.50992,3.81237 0.29613,1.0324 0.77314,1.74791 1.41484,2.22917 0.64171,0.48125 1.49706,0.80201 2.59944,0.65095 1.10239,-0.15105 2.53337,-0.8115 3.62181,-1.42738 1.08843,-0.61588 2.01247,-1.30892 2.81426,-2.21765 0.80178,-0.90873 1.55054,-2.08535 2.29891,-3.63557 0.74837,-1.55023 1.49707,-3.47546 2.12541,-5.40347 0.62835,-1.92801 1.1894,-4.05999 1.40322,-5.87762 0.21381,-1.81763 0.10687,-3.42181 -0.10697,-5.0256 -0.21385,-1.60379 -0.53468,-3.20796 -0.96227,-3.42195 -0.42759,-0.21399 -0.9623,0.96237 -1.2297,2.19226 -0.26739,1.22988 -0.26739,2.51268 -0.26739,3.84943 0,1.33675 0,2.72654 0,4.27717 0,1.55063 0,3.47502 0.0535,5.45337 0.0535,1.97834 0.16038,4.1166 0.32078,5.88102 0.16039,1.76443 0.37423,3.15435 0.90973,3.8971 0.53549,0.74276 1.60334,0.86142 2.33914,0.45634 0.7358,-0.40508 1.29579,-1.41305 1.56302,-2.42868 0.26724,-1.01562 0.26724,-2.08526 0.44235,-3.20348 0.17511,-1.11821 0.46655,-2.08969 0.94774,-2.83807 0.48119,-0.74839 1.12295,-1.17623 1.81863,-1.43686 0.69567,-0.26064 1.65675,-0.38077 2.27247,-0.2931 0.61571,0.0877 1.09489,0.44704 1.46907,1.08847 0.37419,0.64143 0.69501,1.60389 0.85543,2.72669 0.16042,1.1228 0.16042,2.19188 -0.14108,3.18211 -0.30149,0.99024 -0.98143,1.89682 -1.94399,2.32468 -0.96256,0.42786 -2.24526,0.42786 -3.18151,0.18241 -0.93624,-0.24545 -1.63028,-0.82382 -2.00456,-1.46553 -0.37428,-0.64171 -0.4812,-1.39018 -0.42773,-2.51275 0.0535,-1.12256 0.26739,-2.62 0.95507,-3.60067 0.68769,-0.98066 1.66503,-1.3716 2.68068,-1.58539 1.01565,-0.2138 1.76444,-0.2138 2.72659,-0.0534 0.96214,0.16037 2.03177,0.48126 3.02003,1.20876 0.98827,0.72751 1.79168,1.73177 2.21941,2.80096 0.42773,1.06919 0.42773,2.13844 0.42773,3.20786 0,1.06942 0,2.13845 0,3.26134 0,1.1229 0,2.29883 -0.0579,3.58175 -0.0579,1.28292 -0.15595,2.45957 -0.36982,3.95675 -0.21388,1.49718 -0.5346,3.20766 -0.78779,4.38797 -0.2532,1.1803 -0.49527,2.02755 -0.74134,2.12377 -0.24606,0.0962 -0.60951,-0.63066 -0.76987,-1.37917 -0.16037,-0.74851 -0.16037,-1.81794 -0.16037,-2.88707 0,-1.06912 0,-2.24566 0.0535,-3.58211 0.0535,-1.33645 0.16042,-2.83379 0.26734,-4.11684 0.10693,-1.28304 0.21387,-2.35253 0.26732,-3.58202 0.0534,-1.22948 0.0534,-2.61993 0.26733,-3.84954 0.21388,-1.2296 0.64168,-2.2991 1.56851,-3.34289 0.92683,-1.04379 2.49507,-2.16396 3.77801,-2.4312 1.28294,-0.26724 2.35244,0.26751 2.88703,0.85542 0.53459,0.58792 0.53459,1.22956 0.48111,2.29915 -0.0535,1.06958 -0.16035,2.56597 -0.42758,3.47492 -0.26722,0.90896 -0.69486,1.22968 -1.38362,1.56822 -0.68877,0.33854 -1.44979,0.62392 -2.19844,0.78438 -0.74865,0.16045 -1.38998,0.16045 -2.08528,-0.10696 -0.6953,-0.26742 -1.44349,-0.80184 -1.76427,-1.33667 -0.32078,-0.53483 -0.21386,-1.06944 0.13036,-1.16214 0.34422,-0.0927 0.83202,0.19998 1.36659,0.62763 0.53456,0.42765 1.06929,0.96237 1.7109,1.44358 0.64161,0.4812 1.39012,0.90892 2.2397,1.17558 0.84957,0.26665 1.82378,0.37489 2.89297,0.26794 1.06919,-0.10695 2.24569,-0.42781 3.23111,-0.93594 0.98541,-0.50813 1.90162,-1.30982 3.02437,-2.32564 1.12275,-1.01583 2.51282,-2.29898 3.20772,-2.94042 0.6949,-0.64145 0.6949,-0.64145 1.01574,-0.90881 0.32084,-0.26737 0.96259,-0.80216 1.17633,-1.49698 0.21374,-0.69482 -2.1e-4,-1.55063 -0.69498,-2.0317 -0.69477,-0.48107 -1.87124,-0.58802 -3.04753,-0.48111 -1.1763,0.10691 -2.35228,0.42763 -3.10094,1.17617 -0.74866,0.74855 -1.06936,1.92445 -1.17633,2.83348 -0.10698,0.90903 -8e-5,1.55043 0.21382,2.19217 0.2139,0.64173 0.53458,1.28309 0.85541,1.8178 0.32082,0.53471 0.64155,0.96235 1.15435,1.46989 0.5128,0.50754 1.09119,0.98953 1.94671,1.31032 0.85551,0.32079 1.92484,0.42772 2.88712,0.48117 0.96228,0.0534 1.8179,0.0534 2.51288,-0.0535 0.69498,-0.10696 1.2298,-0.32088 1.69093,-0.86418 0.46113,-0.5433 0.92876,-1.59546 1.14254,-2.55764 0.21379,-0.96217 0.21379,-1.92485 0.21379,-2.88708 0,-0.96222 0,-2.13871 0,-2.99406 0,-0.85535 0,-1.49708 0.10686,-1.55059 0.10685,-0.0535 0.3208,0.48136 0.85574,0.53476 0.53494,0.0534 1.39015,-0.37421 2.13851,-0.58799 0.74835,-0.21378 1.17631,-0.21378 1.6573,-0.10688 0.48099,0.1069 0.90892,0.32087 1.28308,0.58812 0.37416,0.26725 0.69503,0.58812 0.90886,0.90883 0.21383,0.3207 0.32076,0.64149 0.42774,0.96244"
                            id="path980"
                            strokeDasharray="440"
                            strokeDashoffset={`${this.state.devPathOffset}`}/> 
                    </g>
                </svg>
            </div>
        )
    }
} 